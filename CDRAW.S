 LST OFF
***************************
*                         *
* RECTANGLE AND BITMAP    *
*  DRAWING ROUTINES       *
*                         *
***************************
*
STKX EQU $00
STKY EQU STKX+2
STKSPEED EQU STKY+1
STKTIMER EQU STKSPEED+1
NMICONT EQU STKTIMER+1
ITEMP EQU NMICONT+2
*
* PURE TEMP'S AND PARAM SPACE
*
PARAM EQU $C0
TEMP EQU PARAM+7
XTEMP EQU TEMP+1
YTEMP EQU XTEMP+1
*
* LOCALS FOR BITMAP ROUTINES
*
BASE1 EQU $D0
BASE2 EQU BASE1+2
TEMPBITS EQU BASE2+2
VERT EQU TEMPBITS+2
HDIV8 EQU VERT+1
HMOD8 EQU HDIV8+1
WIDTH EQU HMOD8+1
HEIGHT EQU WIDTH+1
*
* LOCALS FOR RECTANGLE ROUTINES
*
TEMPRECT EQU BASE2
TOP EQU TEMPRECT+2
LFTDIV8 EQU TOP+1
LFTMOD8 EQU LFTDIV8+1
LEFTEDGE EQU LFTMOD8+1
LEFTMASK EQU LEFTEDGE+1
BOTTOM EQU LEFTMASK+1
RTDIV8 EQU BOTTOM+1
RTMOD8 EQU RTDIV8+1
RIGHTEDGE EQU RTMOD8+1
RIGHTMASK EQU RIGHTEDGE+1
*
* LOCALS FOR MOVE ROUTINES
*
SBEGIN EQU $D0
SEND EQU SBEGIN+2
DBEGIN EQU SEND+2
DEND EQU DBEGIN
EXTRA EQU DEND+2
*
* LOCALS FOR TEXT
*
TBASE EQU HEIGHT+1
*
* USER INTERFACE LOC'S
*
CURSOR EQU $80
CURSORY EQU CURSOR+2
CURSORXDIV8 EQU CURSORY+1
CURSORXMOD8 EQU CURSORXDIV8+1
CURSORHEIGHT EQU CURSORXMOD8+1
CURSORWIDTH EQU CURSORHEIGHT+1
NEWCURSORXDIV8 EQU CURSORWIDTH+1
NEWCURSORXMOD8 EQU NEWCURSORXDIV8+1
NEWCURSORY EQU NEWCURSORXMOD8+1
NEWITEM EQU NEWCURSORY+1
LASTITEM EQU NEWITEM+2
*
* BITMAP TABLES
*
SHFRSLT EQU $1300
SHFOUT EQU SHFRSLT+$700
DIV8 EQU SHFOUT+$700
MOD8 EQU DIV8+$100
LO EQU MOD8+$100
HI EQU LO+$C0
*
HIRES EQU $2B00
DLIST EQU $4910
*
 ORG HI+$C0
*
* DRAW BITMAPS AND ICONS
*
GETBITS STA TEMPBITS
 STX TEMPBITS+1
 LDY #0
 LDA (TEMPBITS),Y
 STA BASE2
 STA BITMAP
 INY
 LDA (TEMPBITS),Y
 STA BASE2+1
 STA BITMAP+1
 INY
 LDA (TEMPBITS),Y
 STA VERT
 INY
 LDA (TEMPBITS),Y
 STA HDIV8
 INY
 LDA (TEMPBITS),Y
 STA HMOD8
 INY
 LDA (TEMPBITS),Y
 STA HEIGHT
 INY
 LDA (TEMPBITS),Y
 SEC
 SBC #1
 STA WIDTH
 RTS
*
* PEN MODE ROUTINES
*
STORE LDA (BASE2),Y
 STA (BASE1),Y
 DEY
 BPL STORE
 BMI DRAWBTS3
*
GRAB LDA (BASE1),Y
 STA (BASE2),Y
 DEY
 BPL GRAB
 BMI DRAWBTS3
*
XOR LDA (BASE2),Y
 EOR (BASE1),Y
 STA (BASE1),Y
 DEY
 BPL XOR
 BMI DRAWBTS3
*
CLR EQU XOR
OR EQU XOR
*
* SET GRAPHICS MODE
*
SETMODE LDA PTBL1,Y ;Y=PEN MODE
 STA PMPATCH1 ;MAKE ALL PATCHES
 LDA PTBL2,Y
 STA PMPATCH2
 LDA PTBL3,Y
 STA PMPATCH3
 STA PMPATCH4
 RTS
*
PTBL1 DA <STORE
 DA <GRAB
 DA <XOR
 DA <CLR
 DA <OR
*
PTBL2 DA <STORE2
 DA <GRAB2
 DA <XOR2
 DA <CLR2
 DA <OR2
*
PTBL3 DA <STORE3
 DA <GRAB3
 DA <XOR3
 DA <CLR3
 DA <OR3
*
DRAWBITS JSR GETBITS
DRAWBTS2 LDY VERT ;GET BASE ADDRESS
 CPY #192
 BCS BITSOUT
 LDA LO,Y
 CLC
 ADC HDIV8
 STA BASE1
 LDA HI,Y
 ADC #0
 STA BASE1+1
*
 LDY WIDTH ;BLAST OUT A SCAN LINE
PMPATCH1 EQU *+1
 JMP STORE ;OFF TO APPROPRIATE MODE
*
DRAWBTS3 DEC HEIGHT
 BEQ BITSOUT ;ANY MORE?
*
 LDA BASE2 ;NEXT ROW IN BITMAP
 SEC
 ADC WIDTH ;WIDTH - 1
 STA BASE2
 LDA BASE2+1
 ADC #0
 STA BASE2+1
 INC VERT
 BNE DRAWBTS2
BITSOUT RTS
*
* BITMAP DRAWING OFFSET BY
*  A NUMBER MOD 7
*
SRADDR DA  >SHFRSLT
 DA  >SHFRSLT+$100
 DA  >SHFRSLT+$200
 DA  >SHFRSLT+$300
 DA  >SHFRSLT+$400
 DA  >SHFRSLT+$500
 DA  >SHFRSLT+$600
*
SOADDR DA  >SHFOUT
 DA  >SHFOUT+$100
 DA  >SHFOUT+$200
 DA  >SHFOUT+$300
 DA  >SHFOUT+$400
 DA  >SHFOUT+$500
 DA  >SHFOUT+$600
*
XOFFDRAW JSR GETBITS
 LDY HMOD8 ;BYTE ALIGNED?
 BEQ DRAWBTS2 ;YES, SPECIAL CASE
 LDA SRADDR-1,Y ;POKE IN SHIFT RESULT,
 STA SHIFTRESULT ;SHIFT OUT TABLE ADDRESSES
 LDA SOADDR-1,Y
 STA SHIFTOUT
*
XOFFDRW2 LDY VERT ;GET BASE
 CPY #192
 BCS BITSOUT
 LDA LO,Y
 SEC
 ADC HDIV8 ;ADD BYTE OFFSET + 1
 STA BASE1
 LDA HI,Y
 ADC #0
 STA BASE1+1
*
 LDY WIDTH ;DO A SCAN LINE
 LDA #0 ;BOUNDARY SHIFT RESULT
BITMAP EQU *+1
XOFFDRW3 LDX $FFFF,Y ;POKE BITMAP ADDRESS
SHIFTOUT EQU *+2
 ORA SHFOUT,X ;HI BYTE MODIFIED
 EOR (BASE1),Y
 STA (BASE1),Y
SHIFTRESULT EQU *+2
 LDA SHFRSLT,X ;HI BYTE MODIFIED
 DEY
 BPL XOFFDRW3
*
 DEC BASE1+1 ;Y=$FF
 EOR (BASE1),Y
 STA (BASE1),Y
*
 DEC HEIGHT
 BEQ BITSOUT
*
 LDA BITMAP
 SEC
 ADC WIDTH
 STA BITMAP
 LDA BITMAP+1
 ADC #0
 STA BITMAP+1
 INC VERT
 BNE XOFFDRW2
*
**********************
*                    *
* RECTANGLE ROUTINES *
*                    *
**********************
*
GETRECT STA TEMPRECT
 STX TEMPRECT+1
 LDY #0
 LDA (TEMPRECT),Y
 STA TOP
 INY
 LDA (TEMPRECT),Y
 STA LFTDIV8
 INY
 LDA (TEMPRECT),Y
 STA LFTMOD8
 TAX
 LDA MASKS,X
 EOR #$FF
 STA LEFTMASK
*
 INY
 LDA (TEMPRECT),Y
 CLC
 ADC TOP
 STA BOTTOM
 INY
 INY
 LDA (TEMPRECT),Y
 CLC
 ADC LFTMOD8
 CMP #8
 BCC *+4
 SBC #8
 STA RTMOD8
 TAX
 DEY
 LDA (TEMPRECT),Y
 ADC LFTDIV8
 STA RTDIV8
 LDA MASKS+1,X
 STA RIGHTMASK
 RTS
*
* MASK AND EDGE TABLES
*
MASKS HEX 00,80,C0,E0,F0,F8,FC,FE,FF
EDGES HEX 80,40,20,10,08,04,02,01
*
* HORIZONTAL LINE DRAWING
*
HLINE LDA LO,X ;X=SCAN LINE
 STA BASE1
 LDA HI,X
 STA BASE1+1
*
 LDA LEFTMASK
 LDY LFTDIV8
 CPY RTDIV8 ;RECT IN A BYTE?
 BEQ HLIN2
*
PMPATCH2 EQU *+1
 JMP STORE2
*
HLIN2 EOR RIGHTMASK
 EOR #$FF
 BCS HLIN4
*
HLIN3 LDA RIGHTMASK
PMPATCH3 EQU *+1
HLIN4 JMP STORE3
*
* VERTICAL LINE DRAWING
*
VLINE LDA EDGES,X ;Y=DIV8, X=MOD8
 STA LEFTEDGE
 LDX TOP
VLIN2 LDA LO,X
 STA BASE1
 LDA HI,X
 STA BASE1+1
*
 LDA LEFTEDGE
PMPATCH4 EQU *+1
 JSR STORE3
*
VLIN3 INX
 CPX BOTTOM
 BCC VLIN2
 BEQ VLIN2
 RTS
*
* PEN MODE HANDLERS FOR RECT'S
*
STORE2 EQU *
GRAB2 EQU *
*
XOR2A LDA #$FF
XOR2 EOR (BASE1),Y
 STA (BASE1),Y
 INY
 CPY RTDIV8
 BCC XOR2A
 BCS HLIN3
*
CLR2A LDA #$FF
CLR2 EOR #$FF
 AND (BASE1),Y
 STA (BASE1),Y
 INY
 CPY RTDIV8
 BCC CLR2A
 BCS HLIN3
*
OR2A LDA #$FF
OR2 ORA (BASE1),Y
 STA (BASE1),Y
 INY
 CPY RTDIV8
 BCC OR2A
 BCS HLIN3
*
STORE3 EQU *
GRAB3 EQU *
*
XOR3 EOR (BASE1),Y
 STA (BASE1),Y
 RTS
*
CLR3 EOR #$FF
 AND (BASE1),Y
 STA (BASE1),Y
 RTS
*
OR3 ORA (BASE1),Y
 STA (BASE1),Y
 RTS
*
* FRAME A RECTANGLE
*
FRAMERECT JSR GETRECT
 LDX TOP
 JSR HLINE
 LDX BOTTOM
 CPX TOP
 BEQ RECTOUT
 JSR HLINE
*
 INC TOP
 DEC BOTTOM
 CPX TOP
 BCC RECTOUT
*
 LDY LFTDIV8
 LDX LFTMOD8
 JSR VLINE
 LDY RTDIV8
 LDX RTMOD8
 JMP VLINE
RECTOUT RTS
*
* DRAW A RECTANGULAR AREA
*
DRAWRECT JSR GETRECT
 LDX TOP
DRAWRCT2 JSR HLINE
 INX
 CPX BOTTOM
 BCC DRAWRCT2
 BEQ DRAWRCT2
 RTS
*
* RECTANGLE HIT TEST
*
INRECT JSR GETRECT
INRECT2 LDX PARAM+3
 LDA PARAM+4
 LDY PARAM+5
 CPX LFTDIV8
 BCC INRECT4
 BNE INRECT3
 CMP LFTMOD8
 BCC INRECT4
INRECT3 CPX RTDIV8
 BCC INRECT5
 BNE INRECT4
 CMP RTMOD8
 BCC INRECT5
 BEQ INRECT5
INRECT4 CLC ;NOT IN RECTANGLE
 RTS
INRECT5 CPY TOP
 BCC INRECT4
 CPY BOTTOM
 BCC *+4
 BNE INRECT4
 SEC ;CURSOR IN RECTANGLE
 RTS
*
**********************
*                    *
* USER INTERFACE AND *
* MISC STUFF         *
*                    *
**********************
*
GETBUTNS LDA $D010
 AND $D011
 EOR #$FF
 ROR
 ROR
 RTS
*
INITCRSR JSR GETBITS
 LDA BASE2
 STA CURSOR
 LDA BASE2+1
 STA CURSOR+1
 LDA HEIGHT
 STA CURSORHEIGHT
 LDX WIDTH
 INX
 STX CURSORWIDTH
*
* SPECIAL CASE CURSOR DRAWING
*
XDRAWCRSR LDA #<CURSOR
 LDX #>CURSOR
 JMP XOFFDRAW
*
UPDATECRSR JSR DOCRSRX
 STX NEWCURSORXDIV8
 STA NEWCURSORXMOD8
 JSR DOCRSRY
 STA NEWCURSORY
 JSR XDRAWCRSR ;ERASE OLD ONE
 LDA NEWCURSORXDIV8
 STA CURSORXDIV8
 LDA NEWCURSORXMOD8
 STA CURSORXMOD8
 LDA NEWCURSORY
 STA CURSORY
 JMP XDRAWCRSR ;DRAW NEW ONE
*
* READ THE PADDLES AND UPDATE
*  THE CURSOR LOCATION
*
DOCRSRX LDX $14
DELAY DEX
 BNE DELAY ;BREAK UP BEAT FREQ
 LDA STKX
 LSR
 LSR
 LSR
 LDY STKX+1
 BEQ DOCX2
 CLC
 ADC #32
DOCX2 TAX
 LDA STKX
 AND #$07
 RTS
*
GETCURSORX LDA CURSORXDIV8
 CMP #32
 BCS GETC2
 ASL
 ASL
 ASL
 ADC CURSORXMOD8
 BCC GETC3
GETC2 LDA #$FF
GETC3 RTS
*
DOCRSRY LDA STKY
 RTS
*
WAIT SEC
WAIT2 PHA
WAIT3 SBC #1
 BNE WAIT3
 PLA
 SBC #1
 BNE WAIT2
 RTS
*
* CURSOR IN RECTANGLE TEST
*
CRSRINRECT LDY CURSORXDIV8 ;KEEP A,X
 STY PARAM+3
 LDY CURSORXMOD8
 STY PARAM+4
 LDY CURSORY
 STY PARAM+5
 STA NEWITEM
 STX NEWITEM+1
 JMP INRECT
*
* MENU SELECTION UTILITY
*
DOMENU STA PARAM
 STX PARAM+1
*
DOMNU2 LDY #0
DOMNU3 LDA (PARAM),Y
 BNE DOMNU5
*
 LDX LASTITEM+1 ;END OF LIST
 BEQ DOMNU4
 LDA LASTITEM
 JSR DRAWRECT ;PENMODE=XOR
 LDA #0
 STA LASTITEM+1
DOMNU4 JSR UPDATECRSR
 JSR GETBUTNS
 BMI DOMNU2
 LDX LASTITEM+1
 BNE *+3
 RTS
 LDA LASTITEM
 JMP DRAWRECT
*
DOMNU5 STY YTEMP ;GET RECTANGLE
 PHA
 INY
 LDA (PARAM),Y
 TAX
 PLA
*
 JSR CRSRINRECT ;CURSOR IN IT?
 BCC DOMNU7
 JSR SELECT
 LDY YTEMP
 BCC DOMNU3
*
 INY
 INY
 LDA (PARAM),Y ;JUMP TO SELECTION
 STA DOMNU6+1
 INY
 LDA (PARAM),Y
 STA DOMNU6+2
DOMNU6 JMP $FFFF
*
DOMNU7 LDA YTEMP ;NEXT MENU ITEM
 ADC #4
 TAY
 BNE DOMNU3
*
SELECT LDA LASTITEM+1 ;NO SELECTION?
 BEQ SELECT3
 CMP NEWITEM+1 ;SAME AS NEW ONE?
 BNE SELECT2
 LDA LASTITEM
 CMP NEWITEM
 BEQ SELECT4
*
SELECT2 JSR DRAWRECT+3 ;NO, TURN NEW ONE ON
 LDA LASTITEM
 LDX LASTITEM+1
 LDY NEWITEM
 STY LASTITEM
 LDY NEWITEM+1
 STY LASTITEM+1
 JSR DRAWRECT ;TURN OLD ONE OFF
 JMP SELECT4
*
SELECT3 JSR DRAWRECT+3 ;TURN ON NEW ONE
 LDA NEWITEM
 STA LASTITEM
 LDA NEWITEM+1
 STA LASTITEM+1
*
SELECT4 JSR UPDATECRSR
*
 JSR GETBUTNS
 CLC
 BMI SELECT5
 LDA LASTITEM
 LDX LASTITEM+1
 JSR DRAWRECT
 SEC
SELECT5 RTS
*
* INIT STUFF
*
INIT LDA #>HIRES
 STA BASE1+1
 LDY #0
 STY BASE1
CLR1A TYA
CLR1B STA (BASE1),Y
 DEY
 BNE CLR1B
 INC BASE1+1
 LDA BASE1+1
 CMP #>DLIST
 BCC CLR1A
 RTS
*
GETPTRS PHA
 LDA $0,X
 STA SBEGIN
 LDA $1,X
 STA SBEGIN+1
 LDA $0,Y
 STA DBEGIN
 LDA $1,Y
 STA DBEGIN+1
 PLA
 TAX
 LDA $0,X
 STA SEND
 LDA $1,X
 STA SEND+1
 RTS
*
MOVEUP JSR GETPTRS
*
MOVUP2 DEC SEND+1
 DEC DEND+1
 LDA SBEGIN+1
 CMP SEND+1
 BCC MOVUP6
 BNE MOVUP3
 LDA SBEGIN
 CMP SEND
 BCC MOVUP6
 BEQ MOVUP6
*
MOVUP3 LDA SBEGIN ;C=1
 SBC SEND
 BEQ MOVUP5
 STA EXTRA
 LDY #$FF
MOVUP4 LDA (SEND),Y
 STA (DEND),Y
 DEY
 CPY EXTRA
 BCS MOVUP4
MOVUP5 RTS
*
MOVUP6 LDY #$FF
MOVUP7 LDA (SEND),Y
 STA (DEND),Y
 DEY
 BNE MOVUP7
 LDA (SEND),Y
 STA (DEND),Y
 JMP MOVUP2
*
MOVEDOWN JSR GETPTRS
*
MOVDN2 LDX SBEGIN+1
 INX
 CPX SEND+1
 BCC MOVDN6
 BNE MOVDN3
 LDA SBEGIN
 CMP SEND
 BCC MOVDN6
 BEQ MOVDN6
*
MOVDN3 LDA SEND
 SBC SBEGIN
 BEQ MOVDN5
 STA EXTRA
 LDY #0
MOVDN4 LDA (SBEGIN),Y
 STA (DBEGIN),Y
 CPY EXTRA
 BEQ MOVDN5
 INY
 BNE MOVDN4
MOVDN5 RTS
*
MOVDN6 LDY #0
MOVDN7 LDA (SBEGIN),Y
 STA (DBEGIN),Y
 INY
 BNE MOVDN7
*
 INC SBEGIN+1
 INC DBEGIN+1
 BNE MOVDN2
*
ADDIYX CLC
 ADC 0,Y
 STA 0,X
 LDA 1,Y
 ADC #0
 STA 1,X
 RTS
*
ADDYX LDA 0,X
 CLC
 ADC 0,Y
 STA 0,X
 LDA 1,X
 ADC 1,Y
 STA 1,X
 RTS
*
SUBIYX STA TEMP
 SEC
 LDA 0,Y
 SBC TEMP
 STA 0,X
 LDA 1,Y
 SBC #0
 STA 1,X
 RTS
*
SUBYX LDA 0,X
 SEC
 SBC 0,Y
 STA 0,X
 LDA 1,X
 SBC 1,Y
 STA 1,X
 RTS
*
CMPYX LDA 1,Y
 CMP 1,X
 BCC CMPYX2
 BNE CMPYX2
 LDA 0,Y
 CMP 0,X
CMPYX2 RTS
*
* MINI-FONT STUFF
*
CHARTO STA CHARBITS+4
 STX CHARBITS+3
 STY CHARBITS+2
 RTS
*
PRCHAR STA TEMP
 CMP #36
 BEQ SPACE
 ASL
 ASL
 ASL
 SEC
 SBC TEMP
 CLC
 ADC #<FONT
 STA CHARBITS
 LDA #0
 ADC #>FONT
 STA CHARBITS+1
 LDA #<CHARBITS
 LDX #>CHARBITS
 JSR XOFFDRAW
SPACE LDY TEMP
 LDA CWIDTH,Y
 SEC
 ADC CHARBITS+4
PRCHR2 CMP #8
 BCC PRCHR3
 INC CHARBITS+3
 SBC #8
 BCS PRCHR2
PRCHR3 STA CHARBITS+4
 RTS
*
PRINT STA TBASE
 STX TBASE+1
 LDY #0
PRNT2 LDA (TBASE),Y
 BMI PRNT3
 STY YTEMP
 JSR PRCHAR
 LDY YTEMP
 INY
 BNE PRNT2
PRNT3 AND #$7F
 JMP PRCHAR
*
CHARBITS HEX 00,00
 HEX 00,00,00,07,01
*
FONT HEX 70D8D8D8D8D870
 HEX 60E060606060F0
 HEX 70D8183060C0F8
 HEX 70D8183018D870
 HEX D8D8D8F8181818
 HEX F8C0F01818D870
 HEX 70D8C0F0D8D870
 HEX F8183060606060
 HEX 70D8D870D8D870
 HEX 70D8D87818D870
 HEX 70D8D8F8D8D8D8
 HEX F0D8D8F0D8D8F0
 HEX 70D8C0C0C0D870
 HEX F0D8D8D8D8D8F0
 HEX F8C0C0F0C0C0F8
 HEX F8C0C0F0C0C0C0
 HEX 70D8C0F8D8D870
 HEX D8D8D8F8D8D8D8
 HEX F06060606060F0
 HEX 3C181818D8D870
 HEX CCD8F0E0F0D8CC
 HEX C0C0C0C0C0C0F8
 HEX EEFED6C6C6C6C6
 HEX CCECDCCCCCCCCC
 HEX F8D8D8D8D8D8F8
 HEX F0D8D8F0C0C0C0
 HEX 70D8D8D8D87018
 HEX F0D8D8F0D8D8D8
 HEX 70D8C07018D870
 HEX FC303030303030
 HEX D8D8D8D8D8D870
 HEX D8D8D8D8D87020
 HEX C6C6C6C6D6FEC6
 HEX CC7830303078CC
 HEX CCCCCC78303030
 HEX F8183060C0C0F8
*
CWIDTH HEX 05040505050505050505
 HEX 05050505050505050406060507
 HEX 06050505050506050507060605
 HEX 04
*
VBLCURSOR INC STKTIMER
 LDA $D300 ;PORTA, STICK 0
 AND #$0F
 CMP #$0F
 STA ITEMP
 BNE VBLCRSR1
 LDA #0
 STA STKTIMER
 LDA $D01F
 AND #$01
 BEQ VBLCRSR1
 JSR GETBUTNS
 BPL VBLCRSR2
*
VBLCRSR1 LDA #0
 STA $13
 STA $4D
VBLCRSR2 LDX #1
 LDA STKTIMER
 CMP #45 ;3/4 SECOND
 BCC *+4
 LDX #2
 STX STKSPEED
*
 LDA STKY
 ROR ITEMP
 BCC CRSRUP
 ROR ITEMP
 BCC CRSRDWN
VBLCRSR3 STA STKY
VBLCRSR4 LDA STKX
 LDX STKX+1
 ROR ITEMP
 BCC CRSRLFT
 ROR ITEMP
 BCC CRSRRT
VBLCRSR5 STA STKX
 STX STKX+1
VBLCRSR6 JMP (NMICONT)
*
CRSRRT CLC
 ADC STKSPEED
 BCC *+3
 INX
 CPX #1
 BCC VBLCRSR5
 CMP #$30
 BCC VBLCRSR5
 BCS VBLCRSR6
*
CRSRLFT ROR ITEMP
 SEC
 SBC STKSPEED
 BCS VBLCRSR5
 DEX
 BPL VBLCRSR5
 BMI VBLCRSR6
*
CRSRDWN CLC
 ADC STKSPEED
 CMP #192
 BCC VBLCRSR3
 BCS VBLCRSR4
*
CRSRUP ROR ITEMP
 SEC
 SBC STKSPEED
 BCS VBLCRSR3
 BCC VBLCRSR4
*
