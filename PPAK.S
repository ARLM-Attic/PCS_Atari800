 LST OFF
*
* PINBALL CONSTRUCTION KIT
* LOW LEVEL
*
 ORG $9920
 OBJ $7000
*
* CONSTANTS
*
POLYGON EQU 1
BPOLYGON EQU 2
LIBOBJ EQU 3
*
* GENERAL PARAM SPACE
*
PARAM EQU $C0
*
* PURE TEMPS
*
TEMP EQU PARAM+7
XTEMP EQU TEMP+1
YTEMP EQU XTEMP+1
TEMP2 EQU YTEMP+1
*
* LOCALS FOR DRAWBITS
*
BASE1 EQU $D0
BASE2 EQU BASE1+2
TEMPBITS EQU BASE2+2
VERT EQU TEMPBITS+2
HDIV8 EQU VERT+1
HMOD8 EQU HDIV8+1
WIDTH EQU HMOD8+1
HEIGHT EQU WIDTH+1
*
* LOCALS FOR RECTANGLES
*
LFTDIV8 EQU BASE2+3
LEFTMASK EQU LFTDIV8+3
RTDIV8 EQU LEFTMASK+2
RIGHTMASK EQU RTDIV8+3
*
* LOCALS FOR SCAN CONVERSION
*
X1 EQU $D0
Y1 EQU X1+1
X2 EQU Y1+1
Y2 EQU X2+1
DX EQU Y2+1
DY EQU DX+1
DXCOEFF EQU DY+1
DXFRACT EQU DXCOEFF+1
DXCODE EQU DXFRACT+1
QUOT EQU DXCODE+1
DVSR EQU QUOT+2
DVDND EQU DVSR+2
SCANLINE EQU DVDND+2
NEXTSTART EQU SCANLINE+1
STARTCOUNT EQU NEXTSTART+1
FIRSTACTV EQU STARTCOUNT+1
LASTLINK EQU FIRSTACTV+1
WRAPPOINT EQU LASTLINK+1
HCNT EQU WRAPPOINT+1
HCNT2 EQU HCNT+1
*
* MAIN PROGRAM LOCALS, GLOBALS
*
CURSOR EQU $80
CURSORY EQU CURSOR+2
CURSORXDIV8 EQU CURSORY+1
CURSORXMOD8 EQU CURSORXDIV8+1
CURSORHEIGHT EQU CURSORXMOD8+1
CURSORWIDTH EQU CURSORHEIGHT+1
NEWCURSORXDIV8 EQU CURSORWIDTH+1
NEWCURSORXMOD8 EQU NEWCURSORXDIV8+1
NEWCURSORY EQU NEWCURSORXMOD8+1
NEWITEM EQU NEWCURSORY+1
LASTITEM EQU NEWITEM+2
*
* OBJECT PROCESSING STUFF
*
OBJ EQU LASTITEM+2
NEXTOBJ EQU OBJ+2
OBJCOUNT EQU NEXTOBJ+1
PLYPTRX EQU OBJCOUNT+1
PLYPTRY EQU PLYPTRX+2
OBJID EQU PLYPTRY+2
FILLCOLOR EQU OBJID+1
VRTXCOUNT EQU FILLCOLOR+1
LBASE EQU VRTXCOUNT+1
SCANMODE EQU LBASE+2
MEMBTM EQU SCANMODE+1
MIDBTM EQU MEMBTM+2
MIDTOP EQU MIDBTM+2
MIDY EQU MIDTOP+2
COLOR EQU MIDY+1
*
* TEMPORARY DATA STRUCTURE
*
ANEXT EQU $400
ANVRTX EQU ANEXT+8
AYFLG EQU ANVRTX+8
AXCOEFF EQU AYFLG+8
AXFRACT EQU AXCOEFF+8
ADXCOEFF EQU AXFRACT+8
ADXFRACT EQU ADXCOEFF+8
ADXCODE EQU ADXFRACT+8
*
NVRTX EQU $440 ;USER AREA
NDXCOEFF EQU NVRTX+64
NDXFRACT EQU NDXCOEFF+64
NDXCODE EQU NDXFRACT+64
DXBUFR EQU NDXCODE+64
*
* PINBALL DATA STRUCTURE
*
PBDATA EQU $4B1C
PBDX EQU $7A40
*
* EXTERNAL CALLS AND ADDRESSES
*
DIV8 EQU $2100
MOD8 EQU DIV8+$100
LO EQU MOD8+$100
HI EQU LO+$C0
SETMODE EQU HI+$10F
DRAWBITS EQU SETMODE+$25
XOFFDRAW EQU DRAWBITS+$41
MASKS EQU XOFFDRAW+$9C
HLINE EQU MASKS+$11
VLINE EQU HLINE+$20
FRAMERECT EQU VLINE+$58
DRAWRECT EQU FRAMERECT+$28
INRECT EQU DRAWRECT+$10
GETBUTNS EQU INRECT+$2D
INITCRSR EQU GETBUTNS+$B
XDRAWCRSR EQU INITCRSR+$14
UPDATECRSR EQU XDRAWCRSR+$7
DOCRSRX EQU UPDATECRSR+$1E
GETCURSORX EQU DOCRSRX+$17
DOCRSRY EQU GETCURSORX+$10
WAIT EQU DOCRSRY+$3
CRSRINRECT EQU WAIT+$C
DOMENU EQU CRSRINRECT+$13
SELECT EQU DOMENU+$54
INIT EQU SELECT+$40
MOVEUP EQU INIT+$35
MOVEDOWN EQU MOVEUP+$3B
ADDIYX EQU MOVEDOWN+$39
ADDYX EQU ADDIYX+$E
SUBIYX EQU ADDYX+$10
SUBYX EQU SUBIYX+$12
CMPYX EQU SUBYX+$10
*
* POLYGON SCAN CONVERSION,
* PINBALL DATA BASE CONSTRUCTION
*
DRAWDISPLAY LDY PBDATA ;GET OBJ COUNT
 STY OBJCOUNT ;INIT INTERNAL DB
 JSR GETOBJ
 LDA OBJ
 STA MEMBTM
 STA MIDBTM
 LDA OBJ+1
 STA MEMBTM+1
 STA MIDBTM+1
 LDA #<PBDX
 STA MIDTOP
 LDA #>PBDX
 STA MIDTOP+1
 LDA #1
 STA MIDY
*
 LDA #0
 LDY #192
DRAWD2 STA PBDX-1,Y
 DEY
 BNE DRAWD2
*
 JSR GETOBJ
DRAWD3 JSR DRAWOBJ
*
 INC NEXTOBJ
 LDY NEXTOBJ
 JSR GETNEXTOBJ
 LDY NEXTOBJ
 CPY OBJCOUNT
 BNE DRAWD3
 RTS
*
GETOBJ LDA #<PBDATA+1
 STA OBJ
 LDA #>PBDATA+1
 STA OBJ+1
 STY NEXTOBJ
 LDY #0
GETNEXTOBJ LDA PBDATA,Y
 CLC
 ADC OBJ
 STA OBJ
 LDA #0
 ADC OBJ+1
 STA OBJ+1
 CPY NEXTOBJ
 BEQ GETOBJ3
 INY
 BNE GETNEXTOBJ
GETOBJ3 LDA SCANMODE
 AND #$80
 STA SCANMODE
 LDY #0
 LDA (OBJ),Y ;GET OBJECT ID
 STA OBJID
 CMP #<POLYGON
 BNE GETOBJ5
*
* GET A POLYGON: F,V,X'S,Y'S
*
GETOBJ4 INY
 LDA (OBJ),Y
 STA FILLCOLOR
 INY
 LDA (OBJ),Y
 STA VRTXCOUNT
*
 LDA #3
 LDY #<OBJ
 LDX #<PLYPTRX
 JSR ADDIYX
*
 LDA VRTXCOUNT
 LDY #<PLYPTRX
 LDX #<PLYPTRY
 JMP ADDIYX
*
GETOBJ5 CMP #<BPOLYGON
 BNE GETOBJ6
 LDA #$40
 ORA SCANMODE
 STA SCANMODE
 BNE GETOBJ4
*
GETOBJ6 JSR GETOBJ4
 LDA VRTXCOUNT
 LDY #<PLYPTRY
 LDX #<LBASE
 JMP ADDIYX
*
DRAWOBJ LDA OBJID
 CMP #<LIBOBJ+1
 BCS RTS1
 CMP #<LIBOBJ
 BNE DROBJ2
 LDA LBASE
 LDX LBASE+1
 JSR XOFFDRAW
DROBJ2 JMP SCANPOLY
*
SCANPOLY BIT SCANMODE
 BMI SCANPOLY2
 JSR GETMINY
 INY
 JSR MAKEHOLE
*
SCANPOLY2 LDA OBJID
 CMP #<LIBOBJ
 BEQ *+9
 LDY FILLCOLOR
 BNE *+5
 JSR POLYPOINTS
*
 JSR PROCESSPOLY
*
* THE ACTIVE LIST IS EMPTY, SO
* SKIP TO NEXT START
*
INITSTARTS LDX NEXTSTART
 BMI SCANOUT
*
 LDA AYFLG,X ;SKIP TO FIRST Y
 STA SCANLINE
*
* ADD ALL EDGES STARTING
* AT SCANLINE
*
ADDSTARTS LDX NEXTSTART
 BMI SCANPLY2
ADDSTARTS2 LDA AYFLG,X
 CMP SCANLINE
 BNE ADDSTARTS9
*
* SWITCH FROM START RECORD TO
* ACTIVE RECORD
*
 LDY ANVRTX,X
 LDA (PLYPTRY),Y
 STA AYFLG,X ;CHANGE FROM START-Y TO END-Y
 LDA ANEXT,X ;SAVE THIS
 STA TEMP
*
* INSERT IN ACTIVE LIST
*  (SORTED BY X)
*
 LDA FIRSTACTV
 BMI ADDSTARTS5
ADDSTARTS3 TAY
 LDA AXCOEFF,X
 CMP AXCOEFF,Y
 BCC ADDSTARTS7
 BEQ ADDSTARTS6
*
ADDSTARTS4 STY YTEMP
 LDA ANEXT,Y
 BPL ADDSTARTS3
*
 STA ANEXT,X ;END OF LIST
 TXA
 STA ANEXT,Y
 BPL ADDSTARTS8
*
ADDSTARTS5 STA ANEXT,X ;HEAD OF LIST
 STX FIRSTACTV
 JMP ADDSTARTS8
*
SCANOUT CLC
RTS1 RTS
*
ADDSTARTS6 LDA ADXFRACT,X
 SEC
 SBC ADXFRACT,Y
 LDA ADXCOEFF,X
 SBC ADXCOEFF,Y
 BVC *+5
 LDA ADXCOEFF,X
 BPL ADDSTARTS4
*
ADDSTARTS7 TYA ;AHEAD OF Y
 CPY FIRSTACTV
 BEQ ADDSTARTS5
*
 STA ANEXT,X
 LDY YTEMP
 TXA
 STA ANEXT,Y
*
ADDSTARTS8 LDX TEMP
 BPL ADDSTARTS2
*
ADDSTARTS9 STX NEXTSTART
*
* NOW SCAN CONVERT ACTIVE EDGES
*
SCANPLY2 LDA #0
 STA HCNT
 LDA FIRSTACTV
 BMI SCANOUT
SCANPLY3 TAX
*
* CHECK FOR EDGES WHICH CHAIN
* OR TERMINATE
*
 LDA AYFLG,X
 CMP SCANLINE
 BNE SCANPLY6
*
 LDY ANVRTX,X ;TERMINATE?
 LDA NVRTX,Y
 BPL SCANPLY5
*
 CPX FIRSTACTV ;YES, REMOVE FROM
 BEQ SCANPLY4 ;ACTIVE LIST
 LDY XTEMP ;MID-LIST
 LDA ANEXT,X
 STA ANEXT,Y
 JMP SCANPLY7
SCANPLY4 LDA ANEXT,X ;HEAD-LIST
 STA FIRSTACTV
 BCS SCANPLY7
*
SCANPLY5 STA ANVRTX,X ;NO, CHAIN
 LDA NDXCOEFF,Y
 STA ADXCOEFF,X
 LDA NDXFRACT,Y
 STA ADXFRACT,X
 LDA NDXCODE,Y
 STA ADXCODE,X
 LDA (PLYPTRX),Y
 STA AXCOEFF,X
 LDA #0
 STA AXFRACT,X
 LDY ANVRTX,X
 LDA (PLYPTRY),Y
 STA AYFLG,X
*
* NOW SCAN CONVERT THE EDGE
*
SCANPLY6 LDA AXFRACT,X
 CLC
 ADC ADXFRACT,X
 STA AXFRACT,X
 LDA AXCOEFF,X
 STA TEMP
 ADC ADXCOEFF,X
 STA AXCOEFF,X
 CLC
 ADC TEMP
 ROR
 LDY HCNT
 STA (MIDBTM),Y
 INY
 LDA NEXTOBJ
 STA (MIDBTM),Y
 LDA ADXCODE,X
 STA DXBUFR,Y
 INY
 STY HCNT
*
 STX XTEMP
 LDA ANEXT,X
SCANPLY7 BPL SCANPLY3
*
* GET READY FOR NEXT SCANLINE
*
 JSR DOSCAN
 INC SCANLINE
 JMP ADDSTARTS
*
* TRAVERSE THE EDGE LIST OF
* A POLYGON TO SET UP SCAN
* CONVERSION
*
PROCESSPOLY LDY #0
 STY STARTCOUNT
 STY LASTLINK
 LDA (PLYPTRY),Y
 STA Y1
 LDA (PLYPTRX),Y
 STA X1
 INY
 STY WRAPPOINT
*
* MAKE SURE V(WRAP-1) DOESN'T
* GET CLASSIFIED AS A START
*
 SEC
 PHP
PRPOLY2 PLP
 JSR PROCESSVERTEX
 PHP
 LDA (PLYPTRX),Y
 STA X1
 LDA (PLYPTRY),Y
 STA Y1
 INY
 CPY WRAPPOINT
 BEQ PRPOLY3
 CPY VRTXCOUNT
 BNE *+4
 LDY #0
 JMP PRPOLY2
*
* WRAP TO MAKE SURE V(N-1) WAS
* CLASSIFIED CORRECTLY
*
PRPOLY3 PLP
 JSR PROCESSVERTEX
*
* FINALLY, SORT THE NEW STARTS
*
SORTSTARTS LDX #0
 STX NEXTSTART
 LDA #$80
 STA ANEXT ;END OF LIST MARKER
 STA FIRSTACTV
*
SORTST2 INX
 CPX STARTCOUNT
 BEQ SORTST6
*
 LDA NEXTSTART
SORTST3 TAY
 LDA AYFLG,X
 CMP AYFLG,Y
 BCS SORTST5
*
 TYA
 STA ANEXT,X
 CPY NEXTSTART
 BEQ SORTST4
 LDY YTEMP
 TXA
 STA ANEXT,Y
 JMP SORTST2
SORTST4 STX NEXTSTART
 BCS SORTST2
*
SORTST5 STY YTEMP
 LDA ANEXT,Y
 BPL SORTST3
*
 STA ANEXT,X
 TXA
 STA ANEXT,Y
 BPL SORTST2
*
SORTST6 RTS
*
* PROCESS A VERTEX, BASED ON
* THE PREVIOUS 2 VERTICES
*
PROCESSVERTEX PHP
*
 LDA (PLYPTRX),Y
 STA X2
 SEC
 SBC X1
 STA DX
 PHP
*
 LDA (PLYPTRY),Y
 STA Y2
*
* SKIP ANY HORIZONTAL EDGES
*  THAT FOLLOW
*
 STY TEMP
PRVRTX2 INY
 CPY VRTXCOUNT
 BCC *+4
 LDY #0
 CMP (PLYPTRY),Y
 BEQ PRVRTX2
 DEY
 BPL *+5
 LDY VRTXCOUNT
 DEY
*
 SEC
 SBC Y1
 STA DY
 BCC PRVRTX4
*
* V2.Y > V3.Y: CALCULATE DX,
*  RECALL V1--V2
*
 PLP
 JSR DIVIDE
 PLP
 BCC PRVRTX3
*
* CHAIN: V1.Y > V2.Y > V3.Y
*
 LDX LASTLINK
 TYA
 STA NVRTX,X
 LDA DXCOEFF
 STA NDXCOEFF,X
 LDA DXFRACT
 STA NDXFRACT,X
 LDA DXCODE
 STA NDXCODE,X
 STY LASTLINK
 RTS
*
* START: V1.Y < V2.Y > V3.Y
*
PRVRTX3 LDX STARTCOUNT
 CPX #8
 BCC *+5
 JMP ABORTSCAN
 STY YTEMP
 TYA
*
 STA ANVRTX,X
 LDA X1
 STA AXCOEFF,X
 LDA DXCOEFF
 STA ADXCOEFF,X
 LDA DXFRACT
 STA ADXFRACT,X
 LDA DXCODE
 STA ADXCODE,X
*
 LDY LASTLINK
 LDA NVRTX,Y
 STA ANVRTX+1,X
 LDA (PLYPTRX),Y
 STA AXCOEFF+1,X
 LDA NDXCOEFF,Y
 STA ADXCOEFF+1,X
 LDA NDXFRACT,Y
 STA ADXFRACT+1,X
 LDA NDXCODE,Y
 STA ADXCODE+1,X
*
 LDA Y1
 STA AYFLG,X
 STA AYFLG+1,X
 LDA #0
 STA AXFRACT,X
 STA AXFRACT+1,X
*
 INX
 INX
 STX STARTCOUNT
 LDY YTEMP
 STY LASTLINK
 SEC
 RTS
*
* V2.Y < V3.Y: CALCULATE -DX,
*  AND RECALL V1--V2
*
PRVRTX4 EOR #$FF
 ADC #1
 STA DY
*
 CLC
 LDA DX
 EOR #$FF
 ADC #1
 STA DX
 PLP
 BCS *+5
 SEC
 BCS *+3
 CLC
*
 JSR DIVIDE
 STY YTEMP
 LDY TEMP
 PLP
 BCC PRVRTX5
*
* TERMINAL: V1.Y > V2.Y < V3.Y
*
 LDX LASTLINK
 LDA #$80
 STA NVRTX,X
*
* CHAIN: V1.Y < V2.Y < V3.Y
*
PRVRTX5 LDA LASTLINK
PRVRTX6 STA NVRTX,Y
 LDA DXCOEFF
 STA NDXCOEFF,Y
 LDA DXFRACT
 STA NDXFRACT,Y
 LDA DXCODE
 STA NDXCODE,Y
*
 STY LASTLINK
 LDY YTEMP
 CLC
 RTS
*
DIVIDE LDA DX
 BNE DIVIDE2
 STA DXCOEFF
 STA DXFRACT
 LDA #8
 STA DXCODE
 RTS
*
DIVIDE2 PHP
 BCS DIVIDE3
 EOR #$FF
 ADC #1
*
DIVIDE3 TAX
 LDA DY
 BEQ DIVIDE4
 STA DVSR+1
 STX DVDND+1
 JSR QDIV
DIVIDE4 STX DXCOEFF
 STA DXFRACT
*
 CPX #16
 BCC DIVIDE5
 LDA #0
 BEQ DIVIDE7
DIVIDE5 CPX #1
 BCC DIVIDE6
 LDA DXCODESA,X ;SLOPES < 1
 BNE DIVIDE7
DIVIDE6 LSR
 LSR
 LSR
 LSR
 TAX
 LDA DXCODESB,X ;SLOPES > 1
DIVIDE7 STA DXCODE
*
 PLP
 BCS DIVIDE8
 LDA #17 ;C=0!
 SBC DXCODE
 STA DXCODE
 LDA DXFRACT
 EOR #$FF
 ADC #0 ;C=1!
 STA DXFRACT
 LDA DXCOEFF
 EOR #$FF
 ADC #0
 STA DXCOEFF
DIVIDE8 RTS
*
DXCODESA HEX 08,0C,0C,0D,0D,0E,0E,0E
 HEX 0E,0F,0F,0F,0F,0F,0F,0F
DXCODESB HEX 08,09,09,0A,0A,0B,0B,0B
 HEX 0B,0B,0C,0C,0C,0C,0C,0C
*
* QUICK 16 X 8 BIT DIVIDE
*
QDIV LDA #0 ;ZERO QUOTIENT
 STA QUOT
 STA QUOT+1
 STA DVSR
 STA DVDND
 LDX #8
 LDA DVSR+1 ;PRE-SCALE DIVISOR
QDV1 INX
 ASL
 BCS QDV2
 CMP DVDND+1
 BCC QDV1
 CLC
*
QDV2 ROR
 STA DVSR+1
 DEX
 BNE QDV5
*
QDV3 LDA DVDND
 SBC DVSR
 STA DVDND
 LDA DVDND+1
 SBC DVSR+1
 STA DVDND+1
QDV4 ROL QUOT
 ROL QUOT+1
 DEX
 BMI QDV6
 LSR DVSR+1
 ROR DVSR
QDV5 LDA DVDND+1
 CMP DVSR+1
 BCC QDV4
 BNE QDV3
 LDA DVDND
 CMP DVSR
 BCS QDV3
 BCC QDV4
*
QDV6 LDA QUOT
 LDX QUOT+1
 RTS
*
* SCAN/MERGE/DRAW ROUTINES
*
DOSCAN LDY SCANLINE
 LDA LO,Y
 STA BASE1
 LDA HI,Y
 STA BASE1+1
*
 LDY HCNT
 BEQ DOSCN4
 BIT SCANMODE
 BVC DOSCN2
 LDX #159
 BNE DOSCN3
*
DOSCN2 DEY
 DEY
 BMI DOSCN4
 LDA (MIDBTM),Y
 TAX
DOSCN3 DEY
 DEY
 LDA (MIDBTM),Y
 STY YTEMP
 JSR DOBAR
 LDY YTEMP
 CPY #2
 BNE DOSCN2
*
* MUST BE B-POLY, FINISH UP
*
 DEY
 DEY
 LDA (MIDBTM),Y
 TAX
 LDA #0
 JSR DOBAR
*
DOSCN4 BIT SCANMODE
 BMI DOSCN7
*
 LDY HCNT
 BEQ DOSCN7
 TYA
 LDX SCANLINE
 CLC
 ADC PBDX,X
 PHP
 STA PBDX,X
 LDA MIDTOP
 SEC
 SBC MIDBTM
 TAX
 LDA MIDTOP+1
 SBC MIDBTM+1
 BEQ *+4
 LDX #$80 ;128-32 > 32
 TXA
 SBC HCNT
 CMP #32
 PHP
*
DOSCN5 DEY
 LDA DXBUFR,Y
 ASL
 ASL
 ASL
 ASL
 ORA DXBUFR-2,Y
 STA (MIDBTM),Y
 DEY
 DEY
 DEY
 BNE DOSCN5
*
 LDA HCNT
 LDY #<MIDBTM
 LDX #<MIDBTM
 JSR ADDIYX
*
* PBDB IS IN NORMAL CONDITION
*
 PLP
 BCC ABORTSCN2
 PLP
 BCS ABORTSCN3
*
 LDX SCANLINE
 CPX #191
 BCS DOSCN7
*
 INC MIDY
 LDY PBDX+1,X
 BEQ DOSCN7
DOSCN6 DEY
 LDA (MIDTOP),Y
 STA (MIDBTM),Y
 TYA
 BNE DOSCN6
*
 LDA PBDX+1,X
 STA TEMP
 LDX #<MIDBTM
 LDY #<MIDBTM
 JSR ADDIYX
 LDA TEMP
 LDX #<MIDTOP
 LDY #<MIDTOP
 JSR ADDIYX
DOSCN7 RTS
*
ABORTSCAN PLA
ABORTSCN2 PLA
ABORTSCN3 PLA
 PLA
 SEC
 RTS
*
* DRAW A COLOR BAR FROM A TO X
*
DOBAR STX TEMP
 CMP TEMP
 BCC DOBAR1
 TAX
 LDA TEMP
DOBAR1 TAY
 LDA DIV8,Y
 STA LFTDIV8
 LDA MOD8,Y
 TAY
 LDA MASKS,Y
 EOR #$FF
 STA LEFTMASK
*
 LDA DIV8,X
 STA RTDIV8
 LDA MOD8,X
 TAX
 LDA MASKS+1,X
 STA RIGHTMASK
*
 LDA LEFTMASK
 LDY LFTDIV8
 CPY RTDIV8
 BNE DOBAR3
 EOR RIGHTMASK
 EOR #$FF
 BNE DOBAR4
DOBAR2 LDA #$FF
DOBAR3 AND FILLCOLOR
 EOR (BASE1),Y
 STA (BASE1),Y
 INY
 CPY RTDIV8
 BCC DOBAR2
 LDA RIGHTMASK
*
DOBAR4 AND FILLCOLOR
 EOR (BASE1),Y
 STA (BASE1),Y
 RTS
*
* ALIGN POLY SO FIRST EDGE HAS
*  NEGATIVE SLOPE
*
ALIGNPOLY LDA #0
 STA YTEMP
ALGNPLY2 LDY #0
 LDA (PLYPTRY),Y
 INY
 CMP (PLYPTRY),Y
 BCC ALGNPLY4
 INC YTEMP
 LDX YTEMP
 CPX VRTXCOUNT
 BEQ ALGNPLY5
*
 DEY
 LDA (PLYPTRY),Y
 PHA
 LDA (PLYPTRX),Y
 PHA
 INY
ALGNPLY3 LDA (PLYPTRY),Y
 TAX
 LDA (PLYPTRX),Y
 DEY
 STA (PLYPTRX),Y
 TXA
 STA (PLYPTRY),Y
 INY
 INY
 CPY VRTXCOUNT
 BNE ALGNPLY3
 DEY
 PLA
 STA (PLYPTRX),Y
 PLA
 STA (PLYPTRY),Y
 BNE ALGNPLY2
ALGNPLY4 CLC
ALGNPLY5 RTS
*
* FIND ABSOLUTE ADDRESS OF
*  SCANLINE
*
GETSCAN STY YTEMP
 CPY MIDY
 BCC GETSCN2
 BNE GETSCN5
*
GETSCN2 LDA MIDBTM
 STA TEMP
 LDA MIDBTM+1
 STA TEMP+1
*
GETSCN3 LDA TEMP ;GET ADDR OF Y
 SEC
 SBC PBDX,Y
 STA TEMP
 LDA TEMP+1
 SBC #0
 STA TEMP+1
 INY
 CPY MIDY
 BCC GETSCN3
 BEQ GETSCN3
GETSCN4 LDY YTEMP
 RTS
*
GETSCN5 LDA MIDTOP
 STA TEMP
 LDA MIDTOP+1
 STA TEMP+1
*
GETSCN6 DEY
 CPY MIDY
 BEQ GETSCN4
 LDA TEMP
 CLC
 ADC PBDX,Y
 STA TEMP
 LDA TEMP+1
 ADC #0
 STA TEMP+1
 BCC GETSCN6
*
GETMINY LDY #0
 LDA (PLYPTRY),Y
 INY
GETMNY2 CMP (PLYPTRY),Y
 BCC GETMNY3
 LDA (PLYPTRY),Y
GETMNY3 INY
 CPY VRTXCOUNT
 BNE GETMNY2
 TAY
 RTS
*
* PREPARE HOLE IN PB-TABLE
*
MAKEHOLE JSR GETSCAN
 DEY ;Y>0
 CPY MIDY
 STY MIDY
 BCS MAKHOL2
*
 LDA #<MIDBTM ;MOVE CHUNK
 LDX #<TEMP
 LDY #<MIDTOP
 JSR MOVEUP
*
 LDY #<TEMP
 LDX #<MIDBTM
 JSR SUBYX ;MIDBTM = DIFF
 LDY #<MIDBTM
 LDX #<MIDTOP
 JSR SUBYX
 LDA TEMP ;TEMP -> NEW BTM
 STA MIDBTM
 LDA TEMP+1
 STA MIDBTM+1
 RTS
*
MAKHOL2 LDA #<TEMP
 LDX #<MIDTOP
 LDY #<MIDBTM
 JSR MOVEDOWN ;MOVE CHUNK
*
 LDX #<MIDTOP
 LDY #<TEMP
 JSR SUBYX ;MIDTOP = -DIFF
 LDX #<MIDBTM
 LDY #<MIDTOP
 JSR SUBYX
 LDA TEMP
 STA MIDTOP
 LDA TEMP+1
 STA MIDTOP+1
 RTS
*
* WHICH POLYGON IS THE USER
*  SELECTING?
*
SELECTPOLY LDY CURSORY
 LDA PBDX,Y
 BEQ SELPLY6
 STA HCNT
 JSR GETSCAN
 JSR GETCURSORX
 STA YTEMP
*
 LDY HCNT
SELPLY2 DEY
 DEY
 CMP (TEMP),Y
 BEQ *+4
 BCS SELPLY4
 DEY
 DEY
 CMP (TEMP),Y
 BCC SELPLY5
*
 INY
 LDA (TEMP),Y
 BEQ SELPLY3 ;B-POLY
 SEC
 RTS
*
SELPLY3 INY
 LDA YTEMP
*
SELPLY4 DEY
 DEY
SELPLY5 CPY #0
 BNE SELPLY2
SELPLY6 CLC
 RTS
*
* DRAW A POLY'S VERTICES
*
POLYPOINTS LDY #0
POLYPTS2 LDA (PLYPTRY),Y
 SEC
 SBC #1
 STA POINT+2
 LDA (PLYPTRX),Y
 SEC
 SBC #1
 TAX
 LDA DIV8,X
 STA POINT+3 ;XDIV8
 LDA MOD8,X
 STA POINT+4
*
 STY YTEMP
 LDA #<POINT
 LDX #>POINT
 JSR XOFFDRAW
 LDY YTEMP
 INY
 CPY VRTXCOUNT
 BNE POLYPTS2
 RTS
*
POINT DA POINTBITS
 HEX 00,00,00,03,01
POINTBITS HEX E0,E0,E0
*
* REMOVE A POLY FROM THE DB
*
REMOVEPOLY JSR GETMINY
 JSR MAKEHOLE
 LDX MIDY
RMVPLY2 INX
 CPX #191
 BCS RMVPLY5
 LDA PBDX,X
 BEQ RMVPLY5
 LSR
 LSR
 STA HCNT
 LDY #0
 STY HCNT2
RMVPLY3 LDY #1
 LDA (MIDTOP),Y
 CMP NEXTOBJ
 BEQ RMVPLY4
*
 STA (MIDBTM),Y ;PRESERVE IT
 INY
 LDA (MIDTOP),Y
 STA (MIDBTM),Y
 INY
 LDA (MIDTOP),Y
 STA (MIDBTM),Y
 LDY #0
 LDA (MIDTOP),Y
 STA (MIDBTM),Y
*
 LDA MIDBTM ;ADD 4 TO MIDBTM
 CLC
 ADC #4
 STA MIDBTM
 LDA MIDBTM+1
 ADC #0
 STA MIDBTM+1
 BNE *+4
*
RMVPLY4 INC HCNT2
 LDA MIDTOP
 CLC
 ADC #4
 STA MIDTOP
 LDA MIDTOP+1
 ADC #0
 STA MIDTOP+1
 DEC HCNT
 BNE RMVPLY3
*
 LDA HCNT2
 BEQ RMVPLY6
 ASL
 ASL
 STA TEMP
 LDA PBDX,X
 SEC
 SBC TEMP
 STA PBDX,X
 JMP RMVPLY2
*
RMVPLY5 DEX
RMVPLY6 STX MIDY
 RTS
*
GETBOUNDS LDY #0
 LDA (PLYPTRY),Y
 STA PARAM
 STA PARAM+1
 LDA (PLYPTRX),Y
 STA PARAM+2
 STA PARAM+3
 INY
GETB2 LDA (PLYPTRY),Y
 CMP PARAM
 BCS GETB3
 STA PARAM ;MINY
GETB3 CMP PARAM+1
 BCC GETB4
 STA PARAM+1
GETB4 LDA (PLYPTRX),Y
 CMP PARAM+2
 BCS GETB5
 STA PARAM+2 ;MINX
GETB5 CMP PARAM+3
 BCC GETB6
 STA PARAM+3
GETB6 INY
 CPY VRTXCOUNT
 BNE GETB2
 RTS
